### bot/handlers.py

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from db.models import User, MediaNote
import db

CATEGORY_KEYBOARD = [["üé¨ Cinema", "üìö Book", "üéµ Song"]]
CATEGORY_MARKUP = ReplyKeyboardMarkup(CATEGORY_KEYBOARD, resize_keyboard=True)

MAIN_KEYBOARD = [["‚ûï New", "üìã View"]]
MAIN_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)


async def reset_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MARKUP
    )


async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user_id = update.effective_user.id
    User.get_or_create(tg_user_id)

    DEFAULT_KEYBOARD = [["‚ûï New", "üìã View"]]
    DEFAULT_MARKUP = ReplyKeyboardMarkup(DEFAULT_KEYBOARD, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã, –∫–Ω–∏–≥–∏ –∏ –ø–µ—Å–Ω–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MARKUP
    )


async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    category_map = {
        "üé¨ Cinema": "Cinema",
        "üìö Book": "Book",
        "üéµ Song": "Song"
    }
    category = category_map.get(text)
    if not category:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    mode = context.user_data.get("mode")
    if mode == "add":
        context.user_data["category"] = category
        context.user_data["awaiting_title"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–µ—Å—ã):")
    elif mode == "view":
        conn = get_connection()
        with conn.cursor() as cur:
            cur.execute("SELECT id FROM users WHERE telegram_id = %s", (tg_user_id,))
            user_row = cur.fetchone()
            if not user_row:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
            user_id = user_row["id"]

            cur.execute("""
                SELECT name, created_at FROM media_notes
                WHERE user_id = %s AND category = %s
                ORDER BY created_at DESC
            """, (user_id, category))
            notes = cur.fetchall()

        if not notes:
            await update.message.reply_text(f"–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}.")
        else:
            note_lines = [f"‚Ä¢ {row['name']} ({row['created_at'].strftime('%Y-%m-%d')})" for row in notes]
            await update.message.reply_text(
                f"–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:\n" + "\n".join(note_lines)
            )

        await reset_context(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: New –∏–ª–∏ View.")


async def handle_title_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_title"):
        title = update.message.text
        category = context.user_data.get("category")
        tg_user_id = update.effective_user.id

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ë–î
        conn = db.get_connection()
        with conn.cursor() as cur:
            cur.execute("SELECT id FROM users WHERE telegram_id = %s", (tg_user_id,))
            user_row = cur.fetchone()
            if not user_row:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
            user_id = user_row["id"]

        # –°–æ–∑–¥–∞—ë–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É
        note = MediaNote(
            name=title,
            author="",  # –ü–æ–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∞
            category=category,
            status="planned",  # –ü–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_id=user_id
        )
        note.save()

        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}!",
            reply_markup=MAIN_MARKUP
        )
        await reset_context(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")
    

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ûï New":
        context.user_data["mode"] = "add"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=CATEGORY_MARKUP
        )
    elif text == "üìã View":
        context.user_data["mode"] = "view"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫:",
            reply_markup=CATEGORY_MARKUP
        )
    elif text in ["üé¨ Cinema", "üìö Book", "üéµ Song"]:
        await handle_category_selection(update, context)
    elif context.user_data.get("awaiting_title"):
        await handle_title_input(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")