### bot/handlers.py

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from db.models import User, MediaNote

CATEGORY_KEYBOARD = [["üé¨ Cinema", "üìö Book", "üéµ Song"]]
CATEGORY_MARKUP = ReplyKeyboardMarkup(CATEGORY_KEYBOARD, resize_keyboard=True)


async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user_id = update.effective_user.id
    User.get_or_create(tg_user_id)

    keyboard = [["‚ûï New", "üìã View"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã, –∫–Ω–∏–≥–∏ –∏ –ø–µ—Å–Ω–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def handle_add_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=CATEGORY_MARKUP
    )


async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    category_map = {
        "üé¨ Cinema": "Cinema",
        "üìö Book": "Book",
        "üéµ Song": "Song"
    }
    category = category_map.get(text)
    if not category:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    mode = context.user_data.get("mode")
    if mode == "add":
        context.user_data["category"] = category
        context.user_data["awaiting_title"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í –±–æ–π –∏–¥—É—Ç –æ–¥–Ω–∏ —Å—Ç–∞—Ä–∏–∫–∏):")
    elif mode == "view":
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫.")
        # TODO: implement viewing logic
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: New –∏–ª–∏ View.")


async def handle_title_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_title"):
        title = update.message.text
        context.user_data["title"] = title
        context.user_data["awaiting_title"] = False

        await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ '{title}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –≤ –±–∞–∑—É üòâ")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ûï New":
        context.user_data["mode"] = "add"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=CATEGORY_MARKUP
        )
    elif text == "üìã View":
        context.user_data["mode"] = "view"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫:",
            reply_markup=CATEGORY_MARKUP
        )
    elif text in ["üé¨ Cinema", "üìö Book", "üéµ Song"]:
        await handle_category_selection(update, context)
    elif context.user_data.get("awaiting_title"):
        await handle_title_input(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")