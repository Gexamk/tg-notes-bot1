### main.py

#
#from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
#from bot.handlers import handle_start, reset_context
#from bot.router import handle_menu_and_typing
#from config import BOT_TOKEN
#from telegram.error import TelegramError
#import logging
#import os
#from dotenv import load_dotenv
#import logging

#def main():
#    logging.warning(f"Using bot token: {BOT_TOKEN}")
#    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

#    app.add_handler(CommandHandler("start", handle_start))
#    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_and_typing))

#    async def error_handler(update, context):
#        logging.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
#        if update and update.message:
#            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞.")
#            await reset_context(update, context)

#    app.add_error_handler(error_handler)

#    app.run_polling()


#if __name__ == "__main__":
#    main()

import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

from config import BOT_TOKEN, WEBHOOK_SECRET_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask app
app = Flask(__name__)

# Telegram bot
telegram_app = Application.builder().token(BOT_TOKEN).build()

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

async def echo(update: Update, context):
    await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

# Webhook endpoint
@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET_TOKEN:
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return "Unauthorized", 401

    try:
        update = Update.de_json(request.get_json(force=True), telegram_app.bot)
        logger.info("‚úÖ Update –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: %s", update)
        telegram_app.update_queue.put_nowait(update)
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: %s", e)

    return "OK", 200

# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram
if __name__ == "__main__":
    logger.info("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –ó–∞–ø—É—Å–∫ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    async def run_telegram():
        await telegram_app.initialize()
        logger.info("‚úÖ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        await telegram_app.start()
        logger.info("üì¨ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    asyncio.get_event_loop().create_task(run_telegram())

    # –ó–∞–ø—É—Å–∫ Flask
    app.run(host="0.0.0.0", port=8080)